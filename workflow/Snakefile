snakemake.utils.min_version('6.3')
wildcard_constraints:
	anal_name = '\w+',
	asc_name = '\w+',
	sim_name = '\w+',
	model_name = '\w+',
	method = '\w+',

# configfile: 'config.yml' # should now be loaded via '--configfile' flag
include: 'rules/common.smk'
include: 'rules/simulate.smk'
include: 'rules/la_and_vcf.smk'
include: 'rules/analyze.smk'
include: 'rules/evaluate.smk'
include: 'rules/plot.smk'
include: 'rules/resolve.smk'
report: 'report/workflow.rst'


rule ancestry_dosage_plots:
	input:
		flare = [f"results/{u.model_name}/{u.sim_name}/{u.asc_name}/{u.anal_name}/DIAGNOSTICS/ancestry_dosage.{i}.flare.pdf"
										for u in units.itertuples() for i in range(3)],
		rfmix2 = [f"results/{u.model_name}/{u.sim_name}/{u.asc_name}/{u.anal_name}/DIAGNOSTICS/ancestry_dosage.{i}.rfmix2.pdf"
										for u in units.itertuples() for i in range(3)],
		mosaic = [f"results/{u.model_name}/{u.sim_name}/{u.asc_name}/{u.anal_name}/DIAGNOSTICS/ancestry_dosage.{i}.mosaic.pdf"
										for u in units.itertuples() for i in range(3)]


rule diagnostic_plots:
	input:
		pop_coal_time = [
			f'results/{u.model_name}/{u.sim_name}/{u.asc_name}/{u.anal_name}/DIAGNOSTICS/pop_coal_time.png'
			for u in units.itertuples()
		],
		pairwise_Fst = [
			f'results/{u.model_name}/{u.sim_name}/{u.asc_name}/{u.anal_name}/DIAGNOSTICS/pairwise_Fst.png'
			for u in units.itertuples()
		],
		#	true_local_ancestry = [
		#	f'results/{u.model_name}/{u.sim_name}/{u.asc_name}/{u.anal_name}/DIAGNOSTICS/true_local_ancestry.png'
		#	for u in units.itertuples()
		#],

rule all:
	input:
		# Diagnostic plots
		flare = [f"results/{u.model_name}/{u.sim_name}/{u.asc_name}/{u.anal_name}/DIAGNOSTICS/ancestry_dosage.{i}.flare.pdf"
										for u in units.itertuples() for i in range(3)],
		rfmix2 = [f"results/{u.model_name}/{u.sim_name}/{u.asc_name}/{u.anal_name}/DIAGNOSTICS/ancestry_dosage.{i}.rfmix2.pdf"
										for u in units.itertuples() for i in range(3)],
		mosaic = [f"results/{u.model_name}/{u.sim_name}/{u.asc_name}/{u.anal_name}/DIAGNOSTICS/ancestry_dosage.{i}.mosaic.pdf"
										for u in units.itertuples() for i in range(3)],
		pairwise_Fst = [
			f'results/{u.model_name}/{u.sim_name}/{u.asc_name}/{u.anal_name}/DIAGNOSTICS/pairwise_Fst.png'
			for u in units.itertuples()
		],
		# Reports
		R2 = 'results/reports/R2_report.txt',
		Q = 'results/reports/Q_report.txt',
		runtime = 'results/reports/runtime_report.txt',
		sites = 'results/reports/sites_report.txt',
		qq = ['results/reports/QQ.flare.txt', 'results/reports/QQ.mosaic.txt', 'results/reports/QQ.rfmix.txt']


rule do_R2_report:
	input:
		R2 = 'results/reports/R2_report.txt',
		# temp4 = [
		# 	f'results/{u.model_name}/{u.sim_name}/{u.asc_name}/{u.anal_name}/SUMMARY/R2_report.txt'
		# 	for u in units.itertuples()
		# ],


rule do_Q_report:
	input:
		Q = 'results/reports/Q_report.txt',
		# temp4 = [
		# f'results/{u.model_name}/{u.sim_name}/{u.asc_name}/{u.anal_name}/SUMMARY/Q_report.txt'
		# for u in units.itertuples()
		# ],


rule do_sites_report:
	input:
		sites = 'results/reports/sites_report.txt',


rule do_runtime_report:
	input:
		'results/reports/runtime_report.txt',


rule reports:
	input:
		R2 = 'results/reports/R2_report.txt',
		Q = 'results/reports/Q_report.txt',
		runtime = 'results/reports/runtime_report.txt',
		sites = 'results/reports/sites_report.txt',


rule just_sim:
	input:
		sim = [
			f'results/{u.model_name}/{u.sim_name}/full.tsz' for u in units.itertuples()
		],


rule just_ascertain:
	input:
		asc = [
			f'results/{u.model_name}/{u.sim_name}/{u.asc_name}/ascertained.tsz' for u in units.itertuples()
		],


rule just_flare:
	input:
		flare = [
			f'results/{u.model_name}/{u.sim_name}/{u.asc_name}/{u.anal_name}/SUMMARY/R2_score.flare.ancestry.tsv'
				for u in units.itertuples()
		],
