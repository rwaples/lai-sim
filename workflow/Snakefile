snakemake.utils.min_version("6.3")
configfile: "config.yml"
include: "rules/common.smk"
include: "rules/install.smk"
include: "rules/phasing.smk"
include: "rules/simulate.smk"
include: "rules/la_and_vcf.smk"



wildcard_constraints:
    anal_name="\w+"


rule done:
	input:
		rfmix2 = [f'results/RFMix2/{u.model_name}/{u.sim_name}/{u.anal_name}.rfmix2.fb.tsv' for u in units.itertuples()],
		rfmix = [f'results/RFMix/{u.model_name}/{u.sim_name}/{u.anal_name}.0.Viterbi.txt' for u in units.itertuples()],
		mosaic = [f'results/MOSAIC/{u.model_name}/{u.sim_name}/{u.anal_name}.results.txt' for u in units.itertuples()],


rule run_mosaic:
	input:
		'results/MOSAIC/{model_name}/{sim_name}/{anal_name}/input/admixedgenofile.22'
	output:
		'results/MOSAIC/{model_name}/{sim_name}/{anal_name}.results.txt'
	params:
		mosaic = config['PATHS']['MOSAIC'],
		input_folder = 'results/MOSAIC/{model_name}/{sim_name}/{anal_name}/input/',
		results_folder = 'results/MOSAIC/{model_name}/{sim_name}/{anal_name}/'
	conda:
		'../r-environment.yml'
	shell:
		"""
		Rscript {params.mosaic} --chromosomes 22:22 --ancestries 3 admixed {params.input_folder}
		mv MOSAIC_RESULTS/ {params.results_folder}
		mv MOSAIC_PLOTS/ {params.results_folder}
		mc FREQS/ {params.results_folder}
		"""




rule make_mosaic_input:
	input:
		target_phased_vcf='results/local_ancestry/{model_name}/{sim_name}/{anal_name}.phased.target_inds.vcf.gz',
		reference_vcf='results/local_ancestry/{model_name}/{sim_name}/{anal_name}.genotypes.reference_inds.vcf.gz',
		plink_map = 'results/local_ancestry/{model_name}/{sim_name}/{anal_name}.plink_map.txt',
		site_ts = 'results/simulations/{model_name}/{sim_name}/{anal_name}.sample.filter.tsz',
	output:
		'results/MOSAIC/{model_name}/{sim_name}/{anal_name}/input/admixedgenofile.22'
	params:
		folder = 'results/MOSAIC/{model_name}/{sim_name}/{anal_name}/input',
		chrom_id = lambda w: units.loc[(w.sim_name, w.anal_name)].chr,
		nind_ref = lambda w: units.loc[(w.sim_name, w.anal_name)].nind_ref,
	script:
		'scripts/make_mosaic_inputs.py'


rule run_RFMix:
	input:
		alleles_file = 'results/local_ancestry/{model_name}/{sim_name}/{anal_name}.alleles_file.txt',
		classes_file = 'results/local_ancestry/{model_name}/{sim_name}/{anal_name}.classes_file.txt',
		positions_file = 'results/local_ancestry/{model_name}/{sim_name}/{anal_name}.positions_file.txt',
	output:
		viterbi = 'results/RFMix/{model_name}/{sim_name}/{anal_name}.0.Viterbi.txt'
	params:
		rfmix = config['PATHS']['RFMix'],
		prefix = 'results/RFMix/{model_name}/{sim_name}/{anal_name}',
		n_threads = 8,
	shell:
		"""
		cd programs/RFmix/RFMix_v1.5.4
		"""
		"python2 RunRFMix.py TrioPhased "
		"--num-threads {params.n_threads} "
		"../../../{input.alleles_file} ../../../{input.classes_file} ../../../{input.positions_file} "
		"-o ../../../{params.prefix} "



rule make_rfmix_input:
	input:
		site_ts = 'results/simulations/{model_name}/{sim_name}/{anal_name}.sample.filter.tsz',
		genetic_map = 'results/local_ancestry/{model_name}/{sim_name}/{anal_name}.genetic_map.txt',
	output:
		alleles_file = 'results/local_ancestry/{model_name}/{sim_name}/{anal_name}.alleles_file.txt',
		classes_file = 'results/local_ancestry/{model_name}/{sim_name}/{anal_name}.classes_file.txt',
		positions_file = 'results/local_ancestry/{model_name}/{sim_name}/{anal_name}.positions_file.txt',
	params:
		nind_ref = lambda w: units.loc[(w.sim_name, w.anal_name)].nind_ref,
		nind_admixed = lambda w: units.loc[(w.sim_name, w.anal_name)].nind_admixed,
	script:
		'scripts/make_rfmix_input.py'


rule run_RFMix2:
	input:
		target_vcf = 'results/local_ancestry/{model_name}/{sim_name}/{anal_name}.phased.target_inds.vcf.gz',
		reference_vcf = 'results/local_ancestry/{model_name}/{sim_name}/{anal_name}.genotypes.reference_inds.vcf.gz',
		sample_map = 'results/local_ancestry/{model_name}/{sim_name}/{anal_name}.sample_map.txt',
		genetic_map = 'results/local_ancestry/{model_name}/{sim_name}/{anal_name}.genetic_map.txt',
	output:
		fb = 'results/RFMix2/{model_name}/{sim_name}/{anal_name}.rfmix2.fb.tsv',
	params:
		rfmix2 = config['PATHS']['RFMix2'],
		bcftools = config['PATHS']['BCFTOOLS'],
		output = 'results/RFMix2/{model_name}/{sim_name}/{anal_name}.rfmix2',
		n_threads = 8,
		chr = lambda w: simulations.loc[w.sim_name].chr,
	shell:
		"""
		export PATH="{params.bcftools}:$PATH"
		"""
		"{params.rfmix2} -f {input.target_vcf} -r {input.reference_vcf} "
		"-m {input.sample_map} -g {input.genetic_map} -o {params.output} "
		"--reanalyze-reference "
		"--n-threads={params.n_threads} --chromosome={params.chr}"
